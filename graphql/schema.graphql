schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "user_notifications"
  """
  delete_user_notifications(
    """filter the rows which have to be deleted"""
    where: user_notifications_bool_exp!
  ): user_notifications_mutation_response

  """
  delete single row from the table: "user_notifications"
  """
  delete_user_notifications_by_pk(id: bigint!): user_notifications

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: bigint!): users

  """
  insert data into the table: "user_notifications"
  """
  insert_user_notifications(
    """the rows to be inserted"""
    objects: [user_notifications_insert_input!]!

    """upsert condition"""
    on_conflict: user_notifications_on_conflict
  ): user_notifications_mutation_response

  """
  insert a single row into the table: "user_notifications"
  """
  insert_user_notifications_one(
    """the row to be inserted"""
    object: user_notifications_insert_input!

    """upsert condition"""
    on_conflict: user_notifications_on_conflict
  ): user_notifications

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "user_notifications"
  """
  update_user_notifications(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_notifications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_notifications_set_input

    """filter the rows which have to be updated"""
    where: user_notifications_bool_exp!
  ): user_notifications_mutation_response

  """
  update single row of the table: "user_notifications"
  """
  update_user_notifications_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: user_notifications_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: user_notifications_set_input
    pk_columns: user_notifications_pk_columns_input!
  ): user_notifications

  """
  update multiples rows of table: "user_notifications"
  """
  update_user_notifications_many(
    """updates to execute, in order"""
    updates: [user_notifications_updates!]!
  ): [user_notifications_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  user_notifications(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): [user_notifications!]!

  """An aggregate relationship"""
  user_notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): user_notifications_aggregate!

  """
  fetch data from the table: "user_notifications" using primary key columns
  """
  user_notifications_by_pk(id: bigint!): user_notifications

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!): users
}

type subscription_root {
  """An array relationship"""
  user_notifications(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): [user_notifications!]!

  """An aggregate relationship"""
  user_notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): user_notifications_aggregate!

  """
  fetch data from the table: "user_notifications" using primary key columns
  """
  user_notifications_by_pk(id: bigint!): user_notifications

  """
  fetch data from the table in a streaming manner: "user_notifications"
  """
  user_notifications_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [user_notifications_stream_cursor_input]!

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): [user_notifications!]!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: bigint!): users

  """
  fetch data from the table in a streaming manner: "users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""用户通知"""
type user_notifications {
  content: String
  created_at: timestamptz!
  id: bigint!
  updated_at: timestamptz!

  """An object relationship"""
  user: users
  user_users: bigint
}

"""
aggregated selection of "user_notifications"
"""
type user_notifications_aggregate {
  aggregate: user_notifications_aggregate_fields
  nodes: [user_notifications!]!
}

input user_notifications_aggregate_bool_exp {
  count: user_notifications_aggregate_bool_exp_count
}

input user_notifications_aggregate_bool_exp_count {
  arguments: [user_notifications_select_column!]
  distinct: Boolean
  filter: user_notifications_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "user_notifications"
"""
type user_notifications_aggregate_fields {
  avg: user_notifications_avg_fields
  count(columns: [user_notifications_select_column!], distinct: Boolean): Int!
  max: user_notifications_max_fields
  min: user_notifications_min_fields
  stddev: user_notifications_stddev_fields
  stddev_pop: user_notifications_stddev_pop_fields
  stddev_samp: user_notifications_stddev_samp_fields
  sum: user_notifications_sum_fields
  var_pop: user_notifications_var_pop_fields
  var_samp: user_notifications_var_samp_fields
  variance: user_notifications_variance_fields
}

"""
order by aggregate values of table "user_notifications"
"""
input user_notifications_aggregate_order_by {
  avg: user_notifications_avg_order_by
  count: order_by
  max: user_notifications_max_order_by
  min: user_notifications_min_order_by
  stddev: user_notifications_stddev_order_by
  stddev_pop: user_notifications_stddev_pop_order_by
  stddev_samp: user_notifications_stddev_samp_order_by
  sum: user_notifications_sum_order_by
  var_pop: user_notifications_var_pop_order_by
  var_samp: user_notifications_var_samp_order_by
  variance: user_notifications_variance_order_by
}

"""
input type for inserting array relation for remote table "user_notifications"
"""
input user_notifications_arr_rel_insert_input {
  data: [user_notifications_insert_input!]!

  """upsert condition"""
  on_conflict: user_notifications_on_conflict
}

"""aggregate avg on columns"""
type user_notifications_avg_fields {
  id: Float
  user_users: Float
}

"""
order by avg() on columns of table "user_notifications"
"""
input user_notifications_avg_order_by {
  id: order_by
  user_users: order_by
}

"""
Boolean expression to filter rows from the table "user_notifications". All fields are combined with a logical 'AND'.
"""
input user_notifications_bool_exp {
  _and: [user_notifications_bool_exp!]
  _not: user_notifications_bool_exp
  _or: [user_notifications_bool_exp!]
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_users: bigint_comparison_exp
}

"""
unique or primary key constraints on table "user_notifications"
"""
enum user_notifications_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  user_notifications_pkey
}

"""
input type for incrementing numeric columns in table "user_notifications"
"""
input user_notifications_inc_input {
  id: bigint
  user_users: bigint
}

"""
input type for inserting data into table "user_notifications"
"""
input user_notifications_insert_input {
  content: String
  created_at: timestamptz
  id: bigint
  updated_at: timestamptz
  user: users_obj_rel_insert_input
  user_users: bigint
}

"""aggregate max on columns"""
type user_notifications_max_fields {
  content: String
  created_at: timestamptz
  id: bigint
  updated_at: timestamptz
  user_users: bigint
}

"""
order by max() on columns of table "user_notifications"
"""
input user_notifications_max_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_users: order_by
}

"""aggregate min on columns"""
type user_notifications_min_fields {
  content: String
  created_at: timestamptz
  id: bigint
  updated_at: timestamptz
  user_users: bigint
}

"""
order by min() on columns of table "user_notifications"
"""
input user_notifications_min_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user_users: order_by
}

"""
response of any mutation on the table "user_notifications"
"""
type user_notifications_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user_notifications!]!
}

"""
on_conflict condition type for table "user_notifications"
"""
input user_notifications_on_conflict {
  constraint: user_notifications_constraint!
  update_columns: [user_notifications_update_column!]! = []
  where: user_notifications_bool_exp
}

"""Ordering options when selecting data from "user_notifications"."""
input user_notifications_order_by {
  content: order_by
  created_at: order_by
  id: order_by
  updated_at: order_by
  user: users_order_by
  user_users: order_by
}

"""primary key columns input for table: user_notifications"""
input user_notifications_pk_columns_input {
  id: bigint!
}

"""
select columns of table "user_notifications"
"""
enum user_notifications_select_column {
  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  user_users
}

"""
input type for updating data in table "user_notifications"
"""
input user_notifications_set_input {
  content: String
  created_at: timestamptz
  id: bigint
  updated_at: timestamptz
  user_users: bigint
}

"""aggregate stddev on columns"""
type user_notifications_stddev_fields {
  id: Float
  user_users: Float
}

"""
order by stddev() on columns of table "user_notifications"
"""
input user_notifications_stddev_order_by {
  id: order_by
  user_users: order_by
}

"""aggregate stddev_pop on columns"""
type user_notifications_stddev_pop_fields {
  id: Float
  user_users: Float
}

"""
order by stddev_pop() on columns of table "user_notifications"
"""
input user_notifications_stddev_pop_order_by {
  id: order_by
  user_users: order_by
}

"""aggregate stddev_samp on columns"""
type user_notifications_stddev_samp_fields {
  id: Float
  user_users: Float
}

"""
order by stddev_samp() on columns of table "user_notifications"
"""
input user_notifications_stddev_samp_order_by {
  id: order_by
  user_users: order_by
}

"""
Streaming cursor of the table "user_notifications"
"""
input user_notifications_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: user_notifications_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input user_notifications_stream_cursor_value_input {
  content: String
  created_at: timestamptz
  id: bigint
  updated_at: timestamptz
  user_users: bigint
}

"""aggregate sum on columns"""
type user_notifications_sum_fields {
  id: bigint
  user_users: bigint
}

"""
order by sum() on columns of table "user_notifications"
"""
input user_notifications_sum_order_by {
  id: order_by
  user_users: order_by
}

"""
update columns of table "user_notifications"
"""
enum user_notifications_update_column {
  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  updated_at

  """column name"""
  user_users
}

input user_notifications_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: user_notifications_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: user_notifications_set_input

  """filter the rows which have to be updated"""
  where: user_notifications_bool_exp!
}

"""aggregate var_pop on columns"""
type user_notifications_var_pop_fields {
  id: Float
  user_users: Float
}

"""
order by var_pop() on columns of table "user_notifications"
"""
input user_notifications_var_pop_order_by {
  id: order_by
  user_users: order_by
}

"""aggregate var_samp on columns"""
type user_notifications_var_samp_fields {
  id: Float
  user_users: Float
}

"""
order by var_samp() on columns of table "user_notifications"
"""
input user_notifications_var_samp_order_by {
  id: order_by
  user_users: order_by
}

"""aggregate variance on columns"""
type user_notifications_variance_fields {
  id: Float
  user_users: Float
}

"""
order by variance() on columns of table "user_notifications"
"""
input user_notifications_variance_order_by {
  id: order_by
  user_users: order_by
}

"""用户表"""
type users {
  created_at: timestamptz!

  """邮箱"""
  email: String!
  id: bigint!
  nickname: String
  phone: String
  updated_at: timestamptz!

  """An array relationship"""
  user_notifications(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): [user_notifications!]!

  """An aggregate relationship"""
  user_notifications_aggregate(
    """distinct select on columns"""
    distinct_on: [user_notifications_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_notifications_order_by!]

    """filter the rows returned"""
    where: user_notifications_bool_exp
  ): user_notifications_aggregate!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: bigint_comparison_exp
  nickname: String_comparison_exp
  phone: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_notifications: user_notifications_bool_exp
  user_notifications_aggregate: user_notifications_aggregate_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: bigint
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  created_at: timestamptz

  """邮箱"""
  email: String
  id: bigint
  nickname: String
  phone: String
  updated_at: timestamptz
  user_notifications: user_notifications_arr_rel_insert_input
}

"""aggregate max on columns"""
type users_max_fields {
  created_at: timestamptz

  """邮箱"""
  email: String
  id: bigint
  nickname: String
  phone: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type users_min_fields {
  created_at: timestamptz

  """邮箱"""
  email: String
  id: bigint
  nickname: String
  phone: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  nickname: order_by
  phone: order_by
  updated_at: order_by
  user_notifications_aggregate: user_notifications_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: bigint!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  phone

  """column name"""
  updated_at
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamptz

  """邮箱"""
  email: String
  id: bigint
  nickname: String
  phone: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  created_at: timestamptz

  """邮箱"""
  email: String
  id: bigint
  nickname: String
  phone: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: bigint
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  nickname

  """column name"""
  phone

  """column name"""
  updated_at
}

input users_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: users_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}